stages:
  - build


services:
  - docker:dind

variables:
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository -DskipTests
  DOCKERFILE: src/main/docker/Dockerfile.jvm
  NATIVE_DOCKERFILE: src/main/docker/Dockerfile.multistage
  # Instruct Testcontainers to use the daemon of DinD.
  DOCKER_HOST: "tcp://docker:2375"
  # Instruct Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""
  # Improve performance with overlayfs.
  DOCKER_DRIVER: overlay2

maven:
  cache:
    paths:
      - .m2/repository
  stage: build
  image: maven:3.6-openjdk-16
  tags:
    - docker
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        export tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        export tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - export CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}
    - |
      mvn $MAVEN_OPTS package \
      -Dquarkus.container-image.username=${CI_REGISTRY_USER} \
      -Dquarkus.container-image.password=${CI_REGISTRY_PASSWORD} \
      -Dquarkus.container-image.build=true \
      -Dquarkus.container-image.push=true

#  artifacts:
#    paths:
#      - object-controller/target/

#docker-build:
#  # Use the official docker image.
#  image: docker:latest
#  stage: docker
#  before_script:
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  # Default branch leaves tag empty (= latest tag)
#  # All other branches are tagged with the escaped branch name (commit ref slug)
#  script:
#    - |
#      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
#        tag=""
#        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
#      else
#        tag=":$CI_COMMIT_REF_SLUG"
#        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
#      fi
#    - cd object-controller
#    - docker build --pull -f $DOCKERFILE -t "$CI_REGISTRY_IMAGE${tag}" .
#    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
#  rules:
#    - if: $CI_COMMIT_BRANCH
#      exists:
#        - Dockerfile
